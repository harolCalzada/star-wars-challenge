service: star-wars-challenge

useDotenv: true

custom:
  tableName: ${self:service}-${self:provider.stage}-characters
  esbuild:
    bundle: true
    minify: true

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    NODE_ENV: ${self:provider.stage}
    CACHE_TTL: 1800 # 30 minutes in seconds
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: !GetAtt CharactersTable.Arn

package:
  patterns:
    - '!node_modules/serverless-dynamodb-local/**'
    - '!node_modules/aws-sdk/**'
    - '!test/**'
    - '!.git/**'
    - '!.vscode/**'
    - '!.serverless/**'
    - '!*.test.ts'
    - '!jest.config.js'
    - '!tsconfig.json'
    - '!README.md'
    - '!.eslintrc.js'
    - '!.prettierrc'

functions:
  api:
    handler: dist/infrastructure/aws/lambda.handler
    events:
      - httpApi:
          path: /api/v1/{proxy+}
          method: ANY

resources:
  Resources:
    CharactersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: IdIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

plugins:
  - serverless-offline
